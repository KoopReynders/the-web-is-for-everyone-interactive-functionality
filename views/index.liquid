<!DOCTYPE html>
<html lang="nl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FDND Teams {{team}}</title>

    <link rel="stylesheet" href="/style.css">
</head>
<body>

<header>
  <h1>Team {{team}}</h1>
</header>

<footer>
  <h2>Persons</h2>

  <ul>
  {% for person in persons %}
    <li>{{ person.name }}</li>
  {% endfor %}
  </ul>
</footer>

<!--
    <form method="POST" action="/detail/{{ id }}/unlike">
    
    <br><br>
    <label for="name">Bericht:</label>
    <br>
    <input
      type="text"
      id="name"
      name="name"
      size="10" />

      <br><br>
      <label for="story">Tell us your story:</label>
      <br>
      <textarea id="story" name="story" rows="5" cols="33">
      It was a dark and stormy night...
      </textarea>

      <br><br>
      <button type="submit">Verstuur bericht</button>
    </form>
-->

<main>
    <h2>Berichten</h2>

    <div id="berichten">
      {% for message in messages %}
      <p>{{ message.from }}: {{ message.text }} @{{ message.created | date: '%d-%m-%Y %H:%M' }}</p>
      {% else %}
      <p>Er zijn nog geen berichten voor dit team.</p>
      {% endfor %}
    </div>
  </main>

  <aside>
    <form method="post" action="/">

      <h3>Voeg een bericht toe</h2>

      <label>
        <span>Naam:</span>
        <input type="text" name="from" required placeholder="Naam">
      </label>

      <label>
        <span>Bericht:</span>
        <textarea name="text" required placeholder="typ typ typ"></textarea>
      </label>

        <button type="submit" id="stuur"><span class="text">Verstuur</span></button>

    </form>


    <details>
      <summary>Data</summary>
      Messages
      <pre>{{ messages | json:4 }}</pre>
      Persons
      <pre>{{ persons | json:4 }}</pre>
  </details>
  
</aside>






<script>

  const messageForm = document.querySelector("form")
  const formButton = document.querySelector("form button#stuur")
  const formNameField = document.querySelector("form input")
  const formTextarea = document.querySelector("form textarea")
  const messages = document.querySelector("#berichten")

  // Als er op de submit button wordt geklikt ...
  messageForm.addEventListener("submit", async function(event) {
    // Voorkom de standaard submit van de browser
    // Let op: hiermee overschrijven we de default Loading state van de browser...
    event.preventDefault()

    //Loading state tonen
    messageForm.classList.add("loading")
    formButton.textContent = "loading..."
    formButton.disabled = true
    //laatste succes state weghalen
    messages.querySelector("p:first-child").classList.remove('highlight')


    // Doe een fetch naar de server, net als hoe de browser dit normaal zou doen
    // Gebruik daarvoor het action en method attribuut van het originele formulier
    // Inclusief alle formulierelementen
    const response = await fetch(messageForm.action, {
      method: messageForm.method, //POST dus
      body: new URLSearchParams(new FormData(messageForm))
    })


    // De server redirect op de normale manier, en geeft HTML terug
    // (De server weet niet eens dat deze fetch via client-side JavaScript gebeurde)
    const responseText = await response.text()


    // Normaal zou de browser die HTML parsen en weergeven, maar daar moeten we nu zelf iets mee
    // Parse de nieuwe HTML en maak hiervan een nieuw Document Object Model in het geheugen
    const parser = new DOMParser()
    const responseDOM = parser.parseFromString(responseText, 'text/html')
    // console.log("responseDOM",responseDOM)


    // Zoek in de responseDOM onze nieuwe state op (die we via Liquid hebben gerenderd)
    const newMessage = responseDOM.querySelector("#berichten > p:first-child")
    // console.log("newMessage",newMessage)

    // Hier wil je waarschijnlijk de Loading state vervangen door een Success state
    messageForm.classList.remove("loading")
    formButton.textContent = "Verstuur"
    formButton.disabled = false
    formNameField.value="" //input field leeg haleb
    formTextarea.value="" //textarea leeg halen


    // Voeg het laatste bericht toe aan de bestaande messages voor de nieuwe state!
    messages.insertBefore(newMessage, messages.firstChild);
    //Geef het nieuwe bericht een mooie kleurtje voor de succes state 
    // console.log(messages.querySelector("p:first-child")`)
    //messages.querySelector("p:first-child").setAttribute('style','background:gold')
    messages.querySelector("p:first-child").classList.add('highlight')
  })

</script>




</body>
</html>
